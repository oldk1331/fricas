-- Test formatted output
-------------------------------------------------------------------
)if false
cd fricas
echo ")read src/input/outputtest.input" \
  | fricas -nosman \
  | perl outputtest.pl > outputtest.tex
TEXINPUTS=src/doc/:$TEXINPUTS pdflatex outputtest.tex
)endif
-------------------------------------------------------------------

-------------------------------------------------------------------
)if outputtest.pl
#!/usr/bin/perl
# Transform output outputtest.input into a proper LaTeX file.
print "\\documentclass{article}\n";
print "\\usepackage{fricasmath,literatedoc}\n";
print "\\begin{document}\n";
print "\\begin{spadcode}\n";
$inspad=1;
while(<>) {if(/^-- IGNORE TEXT ABOVE --/){last;}}
while(<>) {
    if($inspad && /^ *$/){next}
    if($inspad && /^\\begin\{verbcode\}/) {print "\\end{spadcode}\n"; $inspad=0;}
    if(/^\\begin\{spadcode\}/) {$inspad=1;}
    print;
}
print "\n\\end{spadcode}\n";
print "\\end{document}\n";
)endif
-------------------------------------------------------------------

)cd /home/hemmecke/g/fricas
-- Remove indentation.
)lisp (setf |$MARGIN| 0)
F2D ==> Formatter Format2D
F1D ==> Formatter Format1D
FLT ==> Formatter FormatLaTeX
FMJ ==> Formatter FormatMathJax
begin(s: String, env: String): OutputBox == _
  vconcat([box s, box "\hrulefill", box env]$List(OutputBox), 1, -1)$OutputBox
setDefault!(_
  (label: String): OutputBox +-> begin("FormatLaTeX", "\begin{fricasmath}{}"),_
  (label: String): OutputBox +-> box "\end{fricasmath}"_
  )$FLT
setDefault!(_
  (label: String): OutputBox +-> begin("FormatMathJax", "\begin{verbcode}"),_
  (label: String): OutputBox +-> box "\end{verbcode}"_
  )$FMJ
setDefault!(_
  (label: String): OutputBox +-> begin("Format1D", "\begin{verbcode}"),_
  (label: String): OutputBox +-> box "\end{verbcode}"_
  )$F1D
setDefault!(_
  (label: String): OutputBox +-> begin("Format2D", "\begin{verbcode}"),_
  (label: String): OutputBox +-> box "\end{verbcode}"_
  )$F2D

E ==> Expression Integer
OF ==> OutputForm
macro R == Record(OUTPUTFORM: OF, SEXPRESSION: SExpression)
flt x ==> (empty?(rhxl:=lines(format(format(x::OF)$FLT)))=>"";rhxl.1)

macro e x == (_
    o:=x::OF;_
    print(message("\begin{verbcode}")$OF);_
    print(([o, outputTran(o)$Lisp]$R)::OF);_
    print(message("\end{verbcode}")$OF);_
    print(message("TexFormat\hrulefill")$OF);_
    print(message("\begin{verbcode}")$OF);_
    print(o::TexFormat);_
    print(message("\end{verbcode}")$OF);_
    print(message("FormatLaTeX (verbatim)\hrulefill")$OF);_
    print(message("\begin{verbcode}")$OF);_
    print(message(flt x)$OF);_
    print(message("\end{verbcode}")$OF);_
    display(o::FLT);_
    display(o::FMJ);_
    display(o::F1D);_
    display(o::F2D);_
    print(message("Algebra i-output.boot\hrulefill")$OF);_
    print(message("\begin{verbcode}")$OF);_
    print(o);_
    print(message("\end{verbcode}")$OF);_
    print(message("\begin{spadcode}")$OF);_
    x)

)set message type off
)set output algebra off
)set output tex off
)set output formatted off

a: OF := "a"::Symbol::OF;
aa: OF := "aa"::Symbol::OF;
b: OF := "b"::Symbol::OF;
bb: OF := "bb"::Symbol::OF;

-- IGNORE TEXT ABOVE --


e message("Hello World!")$OF

e message("")$OF

e message("%")$OF

e message("\")$OF

e message("\a")$OF

e message("a\")$OF

e message("\ ")$OF

e message("\\")$OF

e message("~")$OF

e message("^")$OF

e message("_"")$OF

e message("__")$OF

e message("%pi")$OF

e message(" %pi")$OF

e message("%pi ")$OF


e outputForm("Hello World!")$OF

e outputForm("")$OF

e outputForm("%")$OF

e outputForm("\")$OF

e outputForm("\a")$OF

e outputForm("a\")$OF

e outputForm("\ ")$OF

e outputForm("\\")$OF

e outputForm("_"")$OF

e outputForm("__")$OF

e outputForm("%pi")$OF

e outputForm(" %pi")$OF

e outputForm("%pi ")$OF

e outputForm("\")$OF

e outputForm("^")$OF

e outputForm("x^y")$OF

e outputForm("x~y")$OF


e outputForm("Hello World!"::Symbol)$OF

e outputForm(""::Symbol)$OF

e outputForm("%"::Symbol)$OF

e outputForm("\"::Symbol)$OF

e outputForm("_""::Symbol)$OF

e outputForm("__"::Symbol)$OF

e outputForm("%pi"::Symbol)$OF

e outputForm(" %pi"::Symbol)$OF

e outputForm("%pi "::Symbol)$OF

e outputForm("\"::Symbol)$OF

e outputForm("^"::Symbol)$OF

e outputForm("x^y"::Symbol)$OF

e outputForm("x~y"::Symbol)$OF


e %pi

e %i

e %e

e exp(%pi)

e %plusInfinity

e %minusInfinity

e %Infinity

e true

e false

e "string"

e("symbol"::Symbol)

e Gamma(x)

e(Gamma(x+1)*Gamma(x+2))

e Gamma(1/2)


e sin(2)

e sin(x)

e tan(x/2)

e asin((x+1)/2)

e sin(1+x)

e tan((2*x+3)/(4*y-2))

e(%pi^((2*x+3)/(4*y-2)))

e((%pi+x/2)^sin(2*x+3))


e quote a

e quote(a+b)

e quote(-a+b)

e (-quote(a+b))

e quote(a*b)

e quote(a/b)

e quote(a^b)


e overbar(a)

e overbar(bb)

e overbar(a+b*aa)

e overbar(a/(b+aa))


e box{123}$OF

e((12+x)^(-u)/(y+z))

e box((12+x)^(-u)/(y+z))

e box((12+a)^(-b)/(a+b))


e [1, 2, 3, 5, 4]

e(bracket(a^b/(b+a))$OF + sin(x))

e(brace(a^b/(b+a))$OF - tan(1/x))

e(paren(a^b/(b+a))$OF - erf(1/x^2))

e set [1, 2, 3, 5, 4]


e((5 + sqrt 63 + sqrt 847)^(1/3))

e(root(5)$OF + root(a+b, a+2)$OF)

e(root(5)$OF + root(a+b, 1/a+2)$OF)

e((5 + 1/sqrt x + sqrt 847)^(1/3)-a)

e(root(5)$OF + root(1/a^2+b, 1/a+2)$OF)

e(root(5)$OF + root(1/a+b, a+3)$OF)

e(root(5)$OF + a + root(1/a+b, 3)$OF)


e(a..b)

e(a+b..aa/bb)

e(a+b..)


e continuedFraction(14159/100000)

e((continuedFraction(314159/100000))^a)

e continuedFraction(3, repeating [1], repeating [3, 6])


e [i for i in 1..]



e(a rem b)

e((a+b) rem (aa*bb))

e((a+b) quo (aa*bb))

e((a+b) exquo (aa*bb))


e slash(a,b)$OF

e slash((3*z+2+z^2)/(1-y), log(x)+sin(x)+(y^2+x^3+x)^2)$OF


e sub(a, b)$OF

e sub(aa, bb)$OF

e sub(a+b, a+bb)$OF

e super(a, b)$OF

e super(aa, bb)$OF

e super(a+aa, b+bb)$OF


e binomial(a, b)

e binomial((a+b)^5, a*b)

e(binomial((a+b)^5, a*b)^2)


e((a+b) <= a^b)


e differentiate(a, 1)

e differentiate(a, 3)

e differentiate(a, 4)

e differentiate(a+b, 4) -- parentheses?

e differentiate(-b-a, 4) -- parentheses?

e differentiate(a^b, 2) -- parentheses?

e differentiate(a^b, 4) -- parentheses?

e prime a

e prime prime a

e prime(a, 2)

e prime(a, 4)

e prime(a+b)


e factorial n


e(euclideanSize$Integer)

eq_fn: (OF, OF) -> OF := =$OF;

e eq_fn

e eq_fn(a, b)

e eq_fn(a^2, b)

e (a +-> b)
e (moebius(5,4,1,1)$MoebiusTransform(Fraction Integer))

TERM ==> Record(k:Integer,c:Integer)
TERMS ==> List TERM
IDPOZZ ==> IndexedDirectProductObject(Integer, Integer)
e (construct([[1,1],[2,4],[3,9],[4,16]]$TERMS)$IDPOZZ)

addx x == ((y: Integer): Integer +-> x + y);

e addx

e addx 10


e((a or b)$OF)

e((aa or bb)$OF)

e((a and b)$OF)

e(((a+aa*b)$OF and (b^bb)$OF)$OF)

e(not(a)$OF)

e(not(eq_fn(aa,b+1))$OF)

e(((a and b)$OF or (aa and bb)$OF)$OF)

e(((a or b)$OF and (aa or bb)$OF)$OF)

e(((a and b)$OF or (aa and bb)$OF)$OF)

e(((a or b)$OF and (not aa or bb)$OF)$OF)


e assign(a, b+bb^a)

e rarrow(a, b)

e rarrow(a+b, aa^bb)

e Mapping(Integer, String)

H ==> XHashTable(Symbol, Integer)
ht := table()$H; ht('x1) := 1; ht('x2):=4; ht('x3):=9;
e ht

AL ==> AssociationList(Symbol,Integer)
RSZ ==> Record(key: Symbol, entry: Integer)
al := construct([['x1,1]$RSZ,['x2,4]$RSZ,['x3,9]$RSZ])$AL;
e al

e(a+b)

e(a+b+aa+bb)


e prefix("f"::Symbol::OF, [aa, bb, 4::OF])

e prefix("funny"::Symbol::OF, [aa, bb, 4::OF])

e prefix("f"::OF, [aa, bb, 4::OF])

e prefix("f"::OF, empty()$List(OF))

e infix("f"::Symbol::OF, a, b)

e infix("+"::Symbol::OF, a, b)

e infix("^"::Symbol::OF, a, b)

e infix("^"::Symbol::OF, a+b, aa+bb)

e infix("f"::Symbol::OF, empty()$List(OF))

e infix("f"::Symbol::OF, [a,b, 7::OF, bb, aa])


e tensor(a,b)

e tensor(a*b,b+a)

e tensor(tensor(a,b), a)


e multiset [x rem 5 for x in primes(2, 100)]

e multiset [x::OF rem 5 for x in primes(2, 20)]


e((x+y)^2)

e((x+y)^20)

e((a+b)^2)


e(int(a))

e(int(a, b))

e(integral(x^x, x))

e(integrate(x^x, x)^2)

e integral(x^x, x=u..v)

e integral(sin x, x=u..v)

e integral(sin x, x=log u..exp v)

e integral(sin x / cos x, x=u..v)

e integral(sin x, x)


e sum(a)

e sum(x^x, x)

e sum(x^x, x=u..v)

e sum(x^x, x=sinh(u)..1/tan(v))


e prod(a)

e product(x^x, x)

e(product(x^x, x=u..v)^2)

e product(x^x, x=1..u/v)

e product(x^x, x=sin(1)..u/cos(v))

e(product(x^x, x=1..u/v)^(r+s))


e supersub(a,[])

e supersub(aa+bb,[a])

e supersub(a,[a,b,1,2,3,4])

e supersub(a,[a,b,1,2+b,3+a*b,4,5])

e supersub(x, [a, b, 1, 2+b, 1/3, 4])

e supersub(x, [a, b, empty()$OF, 2+b, 1/3])


e matrix [[10*i+j for j in 1..2] for i in 1..2] + a

e(matrix [[10*i+j for j in 1..3] for i in 1..3] + a)

e(matrix [ [x^i + y^j for i in 1..3] for j in 1..5])

e(matrix [ [x^i + y^j for i in 1..10] for j in 1..10])

e(matrix [[x/y, x], [x, x]] + a)

e(matrix [[x^y, x], [x, x]] + a)

e(matrix [[x, x], [x^y, x]] + a)

e(matrix [[1,2,3,4,5,6,7,8,9,10,11,12],[12,11,10,9,8,7,6,5,4,3,2,1]])


e(a + pile [a^b, b, aa+a, bb])

e(pile [a^b, b, aa+a, bb]+a)

e(a + vconcat [a^b, b, aa+a, bb])

)set stream calc 3

e series(sin(x+1), x = 1)

e series(1/log(y), y = 1)


e (t: UTS(FLOAT, 'z, 0) := exp(z))
)clear properties t

y := operator 'y

e D(y(x, z), [x, x, z, x])

e D(y x, x, 2)

F := operator 'F;
x := operator 'x;
y := operator 'y;
t := F(x z, y z, z^2) + x y(z+1);
e D(t, z)

)clear properties F x y t


e box presub(F::OF, 2::OF)

e box presub(F, 2)$OF

e box scripts(F::OF, [2::OF, empty()$OF, empty()$OF, 1::OF])

e box scripts(F, [2, empty(), empty(), 1])$OF

e box scripts(F, [2])$OF

e box scripts(F, [2,4])$OF

e box scripts(F, [2,4,7])$OF

e box scripts(F, [2,4,7,11])$OF

e box scripts(F/a, [2,4,7,11])$OF

e box scripts(F^a, [2,4,7,11])$OF

e box scripts(F/a, [2,4/a,7,(a^(2+b))/11])$OF


e [chebyshevT(i, z) for i in 0..7]

e [n for n in 1..30]

e factor(-x^2-1)

e factor (4*x^3+2*y^2+1)*(12*x^5-x^3*y+12)*(x+1)*(y^2+3)*(x^2-1)

e factor((y^4-1)*(x^4-1)*(z^4-1)*(u^4-1))


e matrix [[1,2,1],[2,1,-2],[1,-2,4]]

e eigenvalues matrix [[1,2,1],[2,1,-2],[1,-2,4]]

e solve(x^3  = 8,x)

e radicalSolve(x^3  = 8,x)

e(radicalSolve(1/c^3 + 1/c^2 + 1/c = 0, c)@List(Equation(E))+a)


e rule x == y


e 1234567890123456789012345678901234567890123456789012345678901234567890

e 123456.7890123456789012345678901234567890123456789012345678901234567890

e roman 1234

e decimal(1/352)

e partialFraction(1,factorial(10))

e padicFraction partialFraction(1,factorial(10))

e bits(32,true)

e([28, 32005.12]$Record(age: Integer, salary: Float))

e(exp exp x + a)

e D(exp exp x, x)

e integrate(log(1 + sqrt(u*x + v)) / x,x)

x := operator 'x;
y := operator 'y;
eq1 := D(x(t), t) = 1 + x(t)^2

eq2 := D(y(t), t) = x(t) * y(t)

e seriesSolve([eq2, eq1], [x, y], t = 0, [y(0) = 1, x(0) = 0])
)clear properties x y eq1 eq2


-- The following actually comes out as \SYMBOL{Integer}.

e Integer

-- The following actually comes out as \STRING{Polynomial(Integer)}.

e Polynomial Integer

-- The following actually comes out as \STRING{Fraction(Polynomial(Integer))}.

e Fraction Polynomial Integer

-- The following actually comes out as \STRING{SquareMatrix(3,Integer)}.

e SquareMatrix(3, Integer)

S1 ==> SquareMatrix(2,Polynomial Complex Fraction Integer)
S2 ==> SquareMatrix(2,Polynomial Fraction Complex Integer)
S3 ==> SquareMatrix(2,Fraction Polynomial Complex Integer)
S4 ==> Polynomial SquareMatrix(2,Fraction Complex Integer)

e(s1: S1 := matrix [[x-3/4*%i,z*y^2+1/2],[3/7*%i*y^4 - x,12-%i*9/5]])

e(s1::S2)

e(s1::S3)

e(s1::S4)


e [[i/j for i in j+1..] for j in 1..]

mersenne i == 2^i - 1
mersenne


e(x +-> if x < 0 then -x else x)

e((x,y) +-> abs1(x) > abs1(y))

e((i,j) +-> if even?(i+j) then 1 else -1)

e((x: INT,y: INT): FRAC INT +-> (x + 2*y)/(y - 1))


e(rule integral((?y + exp x)/x,x) == integral(y/x,x) + Ei x)


e dark blue()


e Aleph 1

e sin cos tan x

e script(Mammoth, [[i,j],[k,l],[0,1],[2],[u,v,w]])


e (a + (-b))

e (a * (-b))

e (a ^ (-b))

e (sin(x) ^ sin(-y))

e (sin(x) ^ (- csc(-y^cos(x))))


e subscript(v, [1,n,t])

e subscript(v, [1,sinh(n*%pi),t])

e superscript(v, [1,n,t])

e argscript(v, [1,n,t])


e(subscript(v, [1,n,t])^3)

e(superscript(v, [1,n,t])^4)

e(argscript(v, [1,n,t])^5)


e(x^(y^2))

e(x^y * x^y) -- (x^y)^2


e(sin x + 3*cos(x)^2)

e(sin x + 3*cos(x^2))

p := [1,2,3]::Permutation(Integer);

e(p)

e(a^p)

e(a/p)

)clear prop p

function(cos(x), 'f, 'x)
e f
function(cos(x+y), 'g, 'x, 'y)
e g

)clear prop f g

f(n|n>1 and odd? n) == n+6
e f

g(n|n>1 and odd? n, t | t > 9) == tanh n + t
e g

)clear prop f g
